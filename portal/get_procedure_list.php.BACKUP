<?php

require_once("verify_session.php");
require_once('../library/options.inc.php');

$selects =
    "po.procedure_order_id, po.date_ordered, " .
    "pt1.procedure_type_id AS order_type_id, pc.procedure_name, pc.procedure_code";

$joins =
    "JOIN procedure_order_code AS pc ON pc.procedure_order_id = po.procedure_order_id " .
    "LEFT JOIN procedure_type AS pt1 ON pt1.lab_id = po.lab_id AND pt1.procedure_code = pc.procedure_code " .
    "LEFT JOIN procedure_report AS pr ON pr.procedure_order_id = po.procedure_order_id AND " .
    "pr.procedure_order_seq = pc.procedure_order_seq";

$orderby =
    "po.date_ordered, po.procedure_order_id";

$where = "1 = 1";

$res = sqlStatement("SELECT $selects " .
    "FROM procedure_order AS po $joins " .
    "WHERE po.patient_id = ? AND $where " .
    "ORDER BY $orderby", array($pid));

if (sqlNumRows($res) > 0) {
?>

<table class="table table-striped table-sm table-bordered">
    <tr class="header">
        <th><?php echo xlt('Order Date'); ?></th>
        <th><?php echo xlt('Procedure Name'); ?></th>
        <th><?php echo xlt('Procedure Prices'); ?></th>
    </tr>

    <?php
    $even = false;

    while ($row = sqlFetchArray($res)) {
        $order_type_id  = empty($row['order_type_id'      ]) ? 0 : ($row['order_type_id' ] + 0);
        $report_id      = empty($row['procedure_report_id']) ? 0 : ($row['procedure_report_id'] + 0);

        $selects = "pt2.procedure_type, pt2.procedure_code, pt2.units AS pt2_units, " .
            "pt2.range AS pt2_range, pt2.procedure_type_id AS procedure_type_id, " .
            "pt2.name AS name, pt2.description, pt2.seq AS seq, " .
            "ps.procedure_result_id, ps.result_code AS result_code, ps.result_text, ps.abnormal, ps.result, " .
            "ps.range, ps.result_status, ps.facility, ps.comments, ps.units, ps.comments";

        // procedure_type_id for order:
        $pt2cond = "pt2.parent = '" . add_escape_custom($order_type_id) . "' AND " .
            "(pt2.procedure_type LIKE 'res%' OR pt2.procedure_type LIKE 'rec%')";

        // pr.procedure_report_id or 0 if none:
        $pscond = "ps.procedure_report_id = '" . add_escape_custom($report_id) . "'";

        $joincond = "ps.result_code = pt2.procedure_code";

        // This union emulates a full outer join. The idea is to pick up all
        // result types defined for this order type, as well as any actual
        // results that do not have a matching result type.
        $query = "(SELECT $selects FROM procedure_type AS pt2 " .
            "LEFT JOIN procedure_result AS ps ON $pscond AND $joincond " .
            "WHERE $pt2cond" .
            ") UNION (" .
            "SELECT $selects FROM procedure_result AS ps " .
            "LEFT JOIN procedure_type AS pt2 ON $pt2cond AND $joincond " .
            "WHERE $pscond) " .
            "ORDER BY seq, name, procedure_type_id, result_code";


        //$rres = sqlStatement($query);
        $postcode2 = getPatientData($pid, "postal_code");
        $rres = $res;
        while ($rrow = sqlFetchArray($rres)) {
            if ($even) {
                $class = "class1_even";
                $even = false;
            } else {
                $class = "class1_odd";
                $even = true;
            }
            $date = explode('-', $row['date_ordered']);
            $url = 'https://ihi-api.dexals.com/get_costs?patient_zip=' . $postcode2['postal_code'] . '&procedure_code=' . $rrow['procedure_code'];
            echo "<tr class='" . $class . "'>";
            echo "<td>" . text($date[1] . "/" . $date[2] . "/" . $date[0]) . "</td>";
            echo "<td>" . text($rrow['procedure_name']) . "</td>";
            echo "<td>" . "<a href=$url> LINK </a>" . "</td>";
            /*echo "<td>" . text($rrow['name']) . "</td>";
            echo "<td>" . generate_display_field(array('data_type' => '1', 'list_id' => 'proc_res_abnormal'), $rrow['abnormal']) . "</td>";
            echo "<td>" . text($rrow['result']) . "</td>";
            echo "<td>" . text($rrow['pt2_range']) . "</td>";
            echo "<td>" . generate_display_field(array('data_type' => '1', 'list_id' => 'proc_unit'), $rrow['pt2_units']) . "</td>";
            echo "<td>" . generate_display_field(array('data_type' => '1', 'list_id' => 'proc_res_status'), $rrow['result_status']) . "</td>";
            echo "<td>" . generate_display_field(array('data_type' => '1', 'list_id' => 'proc_rep_status'), $row['report_status']) . "</td>";
            */
            echo "</tr>";

//---------------------------------------
            $APIurl = 'https://ihi-api.dexals.com/get_costs?patient_zip=' . $postcode2['postal_code'] . '&procedure_code=' . $rrow['procedure_code'];

// Fetch data from the API
            $data = file_get_contents($APIurl);

// Check if data retrieval was successful
            if ($data !== false) {
                // Decode JSON response
                $result = json_decode($data, true);

                // Check if decoding was successful
                if ($result !== null) {
                    // Process the API result
                    print_r($result);
                    // Access specific fields as needed, for example:
                    // echo "Procedure cost: " . $result['cost'] . "\n";
                } else {
                    echo "Failed to decode JSON response.";
                }
            } else {
                echo "Failed to fetch data from the API.";
            }

//--------------------------------------
            $jsonData = '{"status":200,"record_count":15,"procedure":{"code":"82010","description":"ACETONE ASSAY"},"costs":[{"facility":{"facility_name":"Hudson Regional Hospital","facility_address":"55 Meadowlands Pkwy","facility_city":"Secaucus","facility_state":"NJ","facility_zip":"07094","distance":21.36},"cost":12.0},{"facility":{"facility_name":"Bayshore Medical Center","facility_address":"727 North Beers St.","facility_city":"Holmdel","facility_state":"NJ","facility_zip":"07733","distance":16.45},"cost":85.0}, /* ... rest of the JSON data ... */ ]}';

// Decode the JSON string to an associative array
            $data = json_decode($jsonData, true);

// Check if the 'costs' array exists and is not empty
            if (isset($data['costs']) && !empty($data['costs'])) {
                // Start building the table
                echo '<table border="1">
            <thead>
                <tr>
                    <th>Facility Name</th>
                    <th>Address</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Zip Code</th>
                    <th>Distance</th>
                    <th>Cost</th>
                </tr>
            </thead>
            <tbody>';

                // Loop through each facility and create table rows
                foreach ($data['costs'] as $facility) {
                    $facilityData = $facility['facility'];
                    $cost = $facility['cost'];
                    echo '<tr>';
                    echo '<td>' . $facilityData['facility_name'] . '</td>';
                    echo '<td>' . $facilityData['facility_address'] . '</td>';
                    echo '<td>' . $facilityData['facility_city'] . '</td>';
                    echo '<td>' . $facilityData['facility_state'] . '</td>';
                    echo '<td>' . $facilityData['facility_zip'] . '</td>';
                    echo '<td>' . $facilityData['distance'] . '</td>';
                    echo '<td>$' . number_format($cost, 2) . '</td>'; // Format cost as currency
                    echo '</tr>';
                }

                // Close the table
                echo '</tbody></table>';
            } else {
                echo 'No data available';
            }

        }
    }

    echo "</table>";
    } else {
        echo xlt("No Results");
    }
    ?>

